---
name: Build

# Controls when the workflow will run
'on':
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  schedule:
    - cron: "7 3 * * 0"

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Python 3.
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install test dependencies.
        run: pip3 install yamllint

      - name: Lint code.
        run: |
          yamllint .

  # Build the images and push them to Docker repository.
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      IMAGE_NAMESPACE: coglinev3
      IMAGE_NAME: alpine
      ALPINE_MAJOR_VERSION: 3
    strategy:
      matrix:
        alpine_version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "3.14"
          - "3.15"
        include:
          - alpine_version: 3.15
            alternate_tag: latest

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Python 3.
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: pip3 install --upgrade ansible docker

      - name: Show Ansible version
        run: ansible --version

      - name: Test building Docker image
        run: ansible-playbook container-alpine.yml
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          ALPINE_VERSION: ${{ matrix.alpine_version }}

      - name: Run the built image
        run: >
          echo Use docker image
          ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${ALPINE_VERSION}
          && docker run -d --rm --name check_bash
          ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${ALPINE_VERSION}
          tail -f /dev/null
        env:
          ALPINE_VERSION: ${{ matrix.alpine_version }}

      - name: Show container os-release
        run: docker exec check_bash env TERM=xterm cat /etc/os-release

      - name: Verify Bash is available in the container
        run: docker exec check_bash env TERM=xterm bash --version

      - name: Stop the container
        run: docker stop check_bash

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: github.ref == 'refs/heads/master'

      - name: Push docker image
        run: bash scripts/docker_push
        env:
          ALPINE_VERSION: ${{ matrix.alpine_version }}
          IMAGE_ALTERNATE_TAG: ${{ matrix.alternate_tag }}
        if: github.ref == 'refs/heads/master'

  # Update Docker Hub description
  dockerHubDescription:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: coglinev3/alpine
